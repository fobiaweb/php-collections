<?php

namespace Fobia\Collections\Test;

use Fobia\Collections\ItemList;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-08 at 02:10:21.
 */
class ItemListTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ItemList
     */
    protected $object;
   protected $handler_error_level;

    const DEFAULT_COUNT = 10;

    /**
     * Создает список элементов
     * Каждый элемент имеет
     *  id   - порядковый номер
     *  name - имя (на основе id)
     *  type - типо (у всех new)
     *  group - группа элемента (Общее кол. создаваемых элементов деляться на 5 групп)
     *  param1 - каждая группа имеет параметры paramX, кол. которых возрвстают с возрвстанием группы
     *  param2, param3...
     *
     * @param int $count
     * @param bool $create_obj
     * @return array
     */
    public function createListItems($count = null, $create_obj = false)
    {
        $groups = 5;
        if ($count === null) {
            $count = self::DEFAULT_COUNT;
        }
        $data = array();
        $group_count = ceil($count / $groups);

        for ($i = 0; $i < $count; $i++ ) {
            $_current_group =  ceil(($i + 1) / $group_count);
            $item = array(
                'id'   => $i,
                'name' => "name_" . $i,
                'type' => 'new',
                'group' => $_current_group,
            );
            for($g = 1; $g < $_current_group; $g++) {
                $item["param$g"] = null;
            }

            if ($create_obj) {
                $item = (object) $item;
            }
            $data[] = $item;
        }

        return $data;
    }

    /**
     *
     * @param int $count
     * @return \Fobia\ObjectCollection
     */
    protected function createObjectCollection($count = 1)
    {
        $objectCollection = new ObjectCollection();

        for ($index = 0; $index < $count; $index ++ ) {
            $objectCollection->addAt(new Item("name_$index", $index));
        }
        return $objectCollection;
    }

    protected function setErrorHandler($errno_level = 256)
    {
        $this->handler_error_level = error_reporting(0);
        set_error_handler(function($errno) use ($errno_level) {
            if ( ! ($errno & $errno_level)) {
                return;
            }
            throw new \Exception("Error", $errno);
        });
    }

    protected function restoreErrorHandler()
    {
        restore_error_handler();
        error_reporting($this->handler_error_level);
        $this->handler_error_level = null;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ItemList;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Fobia\Collections\ItemList::getIterator
     * @todo   Implement testGetIterator().
     */
    public function testGetIterator()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::count
     * @todo   Implement testCount().
     */
    public function testCount()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::getCount
     * @todo   Implement testGetCount().
     */
    public function testGetCount()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::itemAt
     * @todo   Implement testItemAt().
     */
    public function testItemAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::add
     * @todo   Implement testAdd().
     */
    public function testAdd()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::insertAt
     * @todo   Implement testInsertAt().
     */
    public function testInsertAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::remove
     * @todo   Implement testRemove().
     */
    public function testRemove()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::removeAt
     * @todo   Implement testRemoveAt().
     */
    public function testRemoveAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::clear
     * @todo   Implement testClear().
     */
    public function testClear()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::contains
     * @todo   Implement testContains().
     */
    public function testContains()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::indexOf
     * @todo   Implement testIndexOf().
     */
    public function testIndexOf()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::toArray
     * @todo   Implement testToArray().
     */
    public function testToArray()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::copyFrom
     * @todo   Implement testCopyFrom().
     */
    public function testCopyFrom()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Fobia\Collections\ItemList::mergeWith
     * @todo   Implement testMergeWith().
     */
    public function testMergeWith()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}